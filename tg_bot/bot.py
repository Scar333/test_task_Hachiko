from aiogram import Bot, Dispatcher
from aiogram.filters import StateFilter
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message

from check_imei import CheckIMEI
from config import CONFIG
from .keyboards import get_keyboard
from other import is_valid_imei
from .user_state import UserState

bot = Bot(token=CONFIG['API_TOKEN_TG'])
dp = Dispatcher(storage=MemoryStorage())


# TODO: –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(StateFilter(None), Command("start"))
async def command_start(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "/start".

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.

    Returns:
        None
    """

    if str(message.from_user.id) in CONFIG['WHITE_LIST']:
        await message.answer(
            text=f'–ü—Ä–∏–≤–µ—Ç! ü§ó'
                 '\n\n'
                 '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å IMEI —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞!',
            reply_markup=get_keyboard()
        )
    else:
        await message.answer(
            text='–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É –±–æ—Ç—É!',
            reply_markup=None
        )


# TODO: –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å IMEI"
@dp.message(lambda message: message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å IMEI")
async def check_imei(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å IMEI".

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.

    Returns:
        None
    """

    await message.answer(
        text='–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, IMEI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:',
        reply_markup=None
    )
    await state.set_state(UserState.waiting_input_new_emei)


# TODO: –í–≤–æ–¥ IMEI –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(StateFilter(UserState.waiting_input_new_emei))
async def input_imei(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–≤–æ–¥–∞ IMEI.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.

    Returns:
        None
    """

    if is_valid_imei(imei=message.text):
        id_mess = await message.answer(text='–ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ...')
        await state.update_data(id_mess=id_mess.message_id)

        check_imei_instance = CheckIMEI(imei=message.text)
        info = check_imei_instance.get_data_imei()

        await message.reply(info, reply_markup=get_keyboard())

        data = await state.get_data()
        sent_message_id = data.get('id_mess')
        await bot.delete_message(chat_id=message.chat.id, message_id=sent_message_id)

        await state.clear()
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IMEI!"
                            "\n\n"
                            "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –≤–≤–æ–¥–∞.")


# TODO: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def start_bot() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.

    Returns:
        None
    """

    await dp.start_polling(bot)
